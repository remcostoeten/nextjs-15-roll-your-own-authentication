const USER_CREATION_CODE = [
	{
		lineNumber: 1,
		content: [
			{ type: 'keyword', content: 'import' },
			{ type: 'punctuation', content: ' { ' },
			{ type: 'variable', content: 'SignJWT, jwtVerify ' },
			{ type: 'punctuation', content: '} ' },
			{ type: 'keyword', content: 'from' },
			{ type: 'string', content: " 'jose'" },
		],
	},
	{
		lineNumber: 2,
		content: [
			{ type: 'keyword', content: 'import' },
			{ type: 'punctuation', content: ' { ' },
			{ type: 'variable', content: 'cookies ' },
			{ type: 'punctuation', content: '} ' },
			{ type: 'keyword', content: 'from' },
			{ type: 'string', content: " 'next/headers'" },
		],
	},
	{
		lineNumber: 3,
		content: [],
	},
	{
		lineNumber: 4,
		content: [
			{ type: 'keyword', content: 'const' },
			{ type: 'variable', content: ' JWT_SECRET ' },
			{ type: 'operator', content: '= ' },
			{ type: 'keyword', content: 'new' },
			{ type: 'variable', content: ' TextEncoder' },
			{ type: 'punctuation', content: '().' },
			{ type: 'function', content: 'encode' },
			{ type: 'punctuation', content: '(' },
			{ type: 'variable', content: 'process' },
			{ type: 'punctuation', content: '.' },
			{ type: 'variable', content: 'env' },
			{ type: 'punctuation', content: '.' },
			{ type: 'variable', content: 'JWT_SECRET ' },
			{ type: 'operator', content: '|| ' },
			{ type: 'string', content: "'your-secret-key'" },
			{ type: 'punctuation', content: ')' },
		],
	},
	{
		lineNumber: 5,
		content: [],
	},
	{
		lineNumber: 6,
		content: [{ type: 'comment', content: '/**' }],
	},
	{
		lineNumber: 7,
		content: [{ type: 'comment', content: ' * Create a JWT token with the provided payload' }],
	},
	{
		lineNumber: 8,
		content: [{ type: 'comment', content: ' */' }],
	},
	{
		lineNumber: 9,
		content: [
			{ type: 'keyword', content: 'export async function' },
			{ type: 'function', content: ' createToken' },
			{ type: 'punctuation', content: '(' },
			{ type: 'variable', content: 'payload' },
			{ type: 'punctuation', content: ': ' },
			{ type: 'keyword', content: 'any' },
			{ type: 'punctuation', content: ', ' },
			{ type: 'variable', content: 'expiresIn' },
			{ type: 'punctuation', content: ' = ' },
			{ type: 'string', content: "'1d'" },
			{ type: 'punctuation', content: ')' },
		],
	},
	{
		lineNumber: 10,
		content: [
			{ type: 'keyword', content: '  try' },
			{ type: 'punctuation', content: ' {' },
		],
	},
	{
		lineNumber: 11,
		content: [
			{ type: 'keyword', content: '    const' },
			{ type: 'variable', content: ' token ' },
			{ type: 'operator', content: '= ' },
			{ type: 'keyword', content: 'await new' },
			{ type: 'variable', content: ' SignJWT' },
			{ type: 'punctuation', content: '(' },
			{ type: 'variable', content: 'payload' },
			{ type: 'punctuation', content: ')' },
		],
	},
	{
		lineNumber: 12,
		content: [
			{ type: 'punctuation', content: '      .' },
			{ type: 'function', content: 'setProtectedHeader' },
			{ type: 'punctuation', content: '({ ' },
			{ type: 'property', content: 'alg' },
			{ type: 'punctuation', content: ': ' },
			{ type: 'string', content: "'HS256'" },
			{ type: 'punctuation', content: ' })' },
		],
	},
	{
		lineNumber: 13,
		content: [
			{ type: 'punctuation', content: '      .' },
			{ type: 'function', content: 'setIssuedAt' },
			{ type: 'punctuation', content: '()' },
		],
	},
	{
		lineNumber: 14,
		content: [
			{ type: 'punctuation', content: '      .' },
			{ type: 'function', content: 'setExpirationTime' },
			{ type: 'punctuation', content: '(' },
			{ type: 'variable', content: 'expiresIn' },
			{ type: 'punctuation', content: ')' },
		],
	},
	{
		lineNumber: 15,
		content: [
			{ type: 'punctuation', content: '      .' },
			{ type: 'function', content: 'sign' },
			{ type: 'punctuation', content: '(' },
			{ type: 'variable', content: 'JWT_SECRET' },
			{ type: 'punctuation', content: ')' },
		],
	},
	{
		lineNumber: 16,
		content: [],
	},
	{
		lineNumber: 17,
		content: [
			{ type: 'keyword', content: '    return' },
			{ type: 'punctuation', content: ' { ' },
			{ type: 'property', content: 'token' },
			{ type: 'punctuation', content: ' }' },
		],
	},
	{
		lineNumber: 18,
		content: [
			{ type: 'punctuation', content: '  } ' },
			{ type: 'keyword', content: 'catch' },
			{ type: 'punctuation', content: ' (' },
			{ type: 'variable', content: 'error' },
			{ type: 'punctuation', content: ') {' },
		],
	},
	{
		lineNumber: 19,
		content: [
			{ type: 'keyword', content: '    return' },
			{ type: 'punctuation', content: ' { ' },
			{ type: 'property', content: 'error' },
			{ type: 'punctuation', content: ': ' },
			{ type: 'string', content: "'Failed to create token'" },
			{ type: 'punctuation', content: ' }' },
		],
	},
	{
		lineNumber: 20,
		content: [{ type: 'punctuation', content: '  }' }],
	},
	{
		lineNumber: 21,
		content: [{ type: 'punctuation', content: '}' }],
	},
]

const USER_LOGIN_CODE = [
	{
		lineNumber: 1,
		content: [{ type: 'comment', content: '// auth/password-utils.ts' }],
	},
	{
		lineNumber: 2,
		content: [{ type: 'string', content: "'use server'" }],
	},
	{
		lineNumber: 3,
		content: [],
	},
	{
		lineNumber: 4,
		content: [
			{ type: 'keyword', content: 'import' },
			{ type: 'punctuation', content: ' * ' },
			{ type: 'keyword', content: 'as' },
			{ type: 'variable', content: ' bcrypt ' },
			{ type: 'keyword', content: 'from' },
			{ type: 'string', content: " 'bcryptjs'" },
		],
	},
	{
		lineNumber: 5,
		content: [],
	},
	{
		lineNumber: 6,
		content: [{ type: 'comment', content: '/**' }],
	},
	{
		lineNumber: 7,
		content: [{ type: 'comment', content: ' * Hash a password using bcrypt' }],
	},
	{
		lineNumber: 8,
		content: [{ type: 'comment', content: ' */' }],
	},
	{
		lineNumber: 9,
		content: [
			{ type: 'keyword', content: 'export async function' },
			{ type: 'function', content: ' hashPassword' },
			{ type: 'punctuation', content: '(' },
			{ type: 'variable', content: 'password' },
			{ type: 'punctuation', content: ': ' },
			{ type: 'keyword', content: 'string' },
			{ type: 'punctuation', content: '): ' },
			{ type: 'keyword', content: 'Promise' },
			{ type: 'punctuation', content: '<' },
			{ type: 'keyword', content: 'string' },
			{ type: 'punctuation', content: '> {' },
		],
	},
	{
		lineNumber: 10,
		content: [
			{ type: 'keyword', content: '  const' },
			{ type: 'variable', content: ' saltRounds ' },
			{ type: 'operator', content: '= ' },
			{ type: 'number', content: '10' },
		],
	},
	{
		lineNumber: 11,
		content: [
			{ type: 'keyword', content: '  return' },
			{ type: 'variable', content: ' bcrypt' },
			{ type: 'punctuation', content: '.' },
			{ type: 'function', content: 'hash' },
			{ type: 'punctuation', content: '(' },
			{ type: 'variable', content: 'password' },
			{ type: 'punctuation', content: ', ' },
			{ type: 'variable', content: 'saltRounds' },
			{ type: 'punctuation', content: ')' },
		],
	},
	{
		lineNumber: 12,
		content: [{ type: 'punctuation', content: '}' }],
	},
	{
		lineNumber: 13,
		content: [],
	},
	{
		lineNumber: 14,
		content: [{ type: 'comment', content: '/**' }],
	},
	{
		lineNumber: 15,
		content: [{ type: 'comment', content: ' * Compare a password with a hash' }],
	},
	{
		lineNumber: 16,
		content: [{ type: 'comment', content: ' */' }],
	},
	{
		lineNumber: 17,
		content: [
			{ type: 'keyword', content: 'export async function' },
			{ type: 'function', content: ' comparePasswords' },
			{ type: 'punctuation', content: '(' },
			{ type: 'variable', content: 'password' },
			{ type: 'punctuation', content: ': ' },
			{ type: 'keyword', content: 'string' },
			{ type: 'punctuation', content: ', ' },
			{ type: 'variable', content: 'hashedPassword' },
			{ type: 'punctuation', content: ': ' },
			{ type: 'keyword', content: 'string' },
			{ type: 'punctuation', content: '): ' },
			{ type: 'keyword', content: 'Promise' },
			{ type: 'punctuation', content: '<' },
			{ type: 'keyword', content: 'boolean' },
			{ type: 'punctuation', content: '> {' },
		],
	},
	{
		lineNumber: 18,
		content: [
			{ type: 'keyword', content: '  return' },
			{ type: 'variable', content: ' bcrypt' },
			{ type: 'punctuation', content: '.' },
			{ type: 'function', content: 'compare' },
			{ type: 'punctuation', content: '(' },
			{ type: 'variable', content: 'password' },
			{ type: 'punctuation', content: ', ' },
			{ type: 'variable', content: 'hashedPassword' },
			{ type: 'punctuation', content: ')' },
		],
	},
	{
		lineNumber: 19,
		content: [{ type: 'punctuation', content: '}' }],
	},
	{
		lineNumber: 20,
		content: [],
	},
	{
		lineNumber: 21,
		content: [{ type: 'comment', content: '/**' }],
	},
	{
		lineNumber: 22,
		content: [{ type: 'comment', content: ' * Generate a secure random token' }],
	},
	{
		lineNumber: 23,
		content: [{ type: 'comment', content: ' */' }],
	},
	{
		lineNumber: 24,
		content: [
			{ type: 'keyword', content: 'export function' },
			{ type: 'function', content: ' generateToken' },
			{ type: 'punctuation', content: '(' },
			{ type: 'variable', content: 'length' },
			{ type: 'punctuation', content: ' = ' },
			{ type: 'number', content: '32' },
			{ type: 'punctuation', content: '): ' },
			{ type: 'keyword', content: 'string' },
			{ type: 'punctuation', content: ' {' },
		],
	},
	{
		lineNumber: 25,
		content: [
			{ type: 'keyword', content: '  const' },
			{ type: 'variable', content: ' buffer ' },
			{ type: 'operator', content: '= ' },
			{ type: 'keyword', content: 'new' },
			{ type: 'variable', content: ' Uint8Array' },
			{ type: 'punctuation', content: '(' },
			{ type: 'variable', content: 'length' },
			{ type: 'punctuation', content: ')' },
		],
	},
	{
		lineNumber: 26,
		content: [
			{ type: 'variable', content: '  crypto' },
			{ type: 'punctuation', content: '.' },
			{ type: 'function', content: 'getRandomValues' },
			{ type: 'punctuation', content: '(' },
			{ type: 'variable', content: 'buffer' },
			{ type: 'punctuation', content: ')' },
		],
	},
	{
		lineNumber: 27,
		content: [
			{ type: 'keyword', content: '  return' },
			{ type: 'variable', content: ' Array' },
			{ type: 'punctuation', content: '.' },
			{ type: 'function', content: 'from' },
			{ type: 'punctuation', content: '(' },
			{ type: 'variable', content: 'buffer' },
			{ type: 'punctuation', content: ')' },
		],
	},
	{
		lineNumber: 28,
		content: [
			{ type: 'punctuation', content: '    .' },
			{ type: 'function', content: 'map' },
			{ type: 'punctuation', content: '(' },
			{ type: 'variable', content: 'b ' },
			{ type: 'operator', content: '=> ' },
			{ type: 'variable', content: 'b' },
			{ type: 'punctuation', content: '.' },
			{ type: 'function', content: 'toString' },
			{ type: 'punctuation', content: '(' },
			{ type: 'number', content: '16' },
			{ type: 'punctuation', content: ').' },
			{ type: 'function', content: 'padStart' },
			{ type: 'punctuation', content: '(' },
			{ type: 'number', content: '2' },
			{ type: 'punctuation', content: ', ' },
			{ type: 'string', content: "'0'" },
			{ type: 'punctuation', content: '))' },
		],
	},
	{
		lineNumber: 29,
		content: [
			{ type: 'punctuation', content: '    .' },
			{ type: 'function', content: 'join' },
			{ type: 'punctuation', content: '(' },
			{ type: 'string', content: "''" },
			{ type: 'punctuation', content: ')' },
		],
	},
	{
		lineNumber: 30,
		content: [{ type: 'punctuation', content: '}' }],
	},
]

export { USER_LOGIN_CODE, USER_CREATION_CODE	 }
