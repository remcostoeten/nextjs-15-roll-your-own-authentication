# Project Architecture & Development Guidelines (Functional Repositories)

This is a nextjs project, app router version 15 and react 19.  It is a note / snippet storage  app. 

### Database & api

This project runs on sqlite, turso. Via drizzle-orm. We have strong s eperation of concerns, each module has its own schema, which we import into the main schema which sits at src/api/db/schema.ts. The schema can be imported via the alias `schema`. The db can be imported  via the alias `db`.

We follow a repository pattern, but we use functions instead of classes. The repositories are located in the `repositories` folder within each module. The repositories are responsible for all database access. The repositories are called by the server actions, which are located in the `queries` and `mutations` folders within each module. The server actions are called by the client via server actions. The server actions are responsible for all business logic. The server actions do not have any database access. The server actions

Repositories <> queries/mutations (also known as serrver actions) <> hooks <> components

We never use API routes.

### Authentication

This is custom rolled, jwt + sessions. The Reference the module authentication.


## ðŸ”§ Project Structure Rules

Use a clear domain-driven folder structure:

*   `src/modules/`: Contains all feature-specific code, organized by feature name.
    *   `src/modules/authenticatie/`: All authentication logic.
        *   `src/modules/authenticatie/queries/`: Authentication-specific query functions.
        *   `src/modules/authenticatie/mutations/`: Authentication-specific mutation functions.
        *   `src/modules/authenticatie/repositories/`: Authentication-specific functional repositories.
*   `src/shared/`: Contains any shared logic, components, hooks, or utilities used across the application.
    *   `src/shared/components/ui/`: Shared components like those from Shadcn.
    *   `src/shared/state/`: Any shared application state.
    *   `src/shared/types/`: Generic shared types.
    *   `src/shared/repositories/`: Base or shared functional repository implementations.
*   `src/components/`: Holds singular-use components (e.g., header, footer).
*   `src/app/`: Used exclusively for rendering views. Each page consists of a `page.tsx` and associated metadata.
    *   **Views:** The page content is imported from `src/views/<page-name>/index.tsx`. Views only handle rendering and importing componentsâ€”no logic is present here.
*   `src/views/`: Contains the UI composition for specific pages, composed of UI blocks.
*   `src/api/`: Server-side logic and API endpoints.
    *   `src/api/db/`: Database layer and schemas.
        *   `src/api/db/index.ts`: Database connection.
        *   `src/api/db/schemas/`: Drizzle schemas.
        *   `src/api/db/schemas/index.ts`: Main schema exports.
    *   `src/api/env.ts`: t3 env setup.
*   `src/schema/`: Drizzle schemas only (can be used for partial schemas within modules).
*   `src/hooks/`: Custom React hooks (auth state, effects).

### âœ… Patterns to Follow

*   Use functional programming.
*   Define all logic in functions, not classes.
*   Implement the Repository Pattern using functional constructs. All database queries and mutations should be handled within dedicated functional repositories.
*   Functional repositories should abstract the underlying data source (e.g., Drizzle ORM) from the application logic.
*   Use `TProps` if only one type exists in a file.
*   Use `TPrefixName` style if multiple types exist in a file.
*   Prefer `type` unless you need polymorphism, then use `interface`.
*   Use server actions that directly call repository functions for data access (no separate actions folder).
*   Always use email as the unique user identity key.
*   Immediately create a session and set cookies after authentication. This logic will reside in a mutation function.
*   Use conditional UI rendering to redirect away from login/register if authenticated.
*   Use `mapUser()` per provider for adaptable OAuth payloads.
*   Store authenticated state in a shared state or hook so the UI updates instantly.
*   Place provider configurations in a single `PROVIDERS` object for scalability.
*   Abstract database access under an alias `db` (e.g., `import { db } from 'db'`).
*   Abstract database code for easy swapping of ORMs.
*   Implement all server logic as **server functions** within `queries` and `mutations` folders, co-located with their respective modules. These server functions will interact with the functional repositories.
*   Ensure everything built is agnostic to the underlying libraries and frameworks (e.g., database and authentication logic should be easily swappable). The functional Repository Pattern facilitates this.
*   Avoid framework/library-specific naming (e.g., no `supabase.ts` or `prisma.ts`).
*   Design features to be portable across projects with minimal changes.
*   Emphasize shared components and hooks for consistency.