---
title: Project Architecture & Development Guidelines (Functional Repositories)
description: A comprehensive guide to the project's structure, architecture patterns, performance optimizations, and authentication implementation, emphasizing functional repositories and simplified data access.
---

# Project Architecture & Development Guidelines (Functional Repositories)

This document outlines the guidelines for structuring the project, implementing architectural patterns, optimizing performance, and handling authentication. Adhering to these guidelines is crucial for building a scalable, maintainable, and performable application. This version utilizes a functional approach for repositories and simplifies the project structure by focusing on queries and mutations directly within modules.

## üîß Project Structure Rules

Use a clear domain-driven folder structure:

*   `src/modules/`: Contains all feature-specific code, organized by feature name.
    *   `src/modules/authenticatie/`: All authentication logic.
        *   `src/modules/authenticatie/queries/`: Authentication-specific query functions.
        *   `src/modules/authenticatie/mutations/`: Authentication-specific mutation functions.
        *   `src/modules/authenticatie/repositories/`: Authentication-specific functional repositories.
*   `src/shared/`: Contains any shared logic, components, hooks, or utilities used across the application.
    *   `src/shared/components/ui/`: Shared components like those from Shadcn.
    *   `src/shared/state/`: Any shared application state.
    *   `src/shared/types/`: Generic shared types.
    *   `src/shared/repositories/`: Base or shared functional repository implementations.
*   `src/components/`: Holds singular-use components (e.g., header, footer).
*   `src/app/`: Used exclusively for rendering views. Each page consists of a `page.tsx` and associated metadata.
    *   **Views:** The page content is imported from `src/views/<page-name>/index.tsx`. Views only handle rendering and importing components‚Äîno logic is present here.
*   `src/views/`: Contains the UI composition for specific pages, composed of UI blocks.
*   `src/api/`: Server-side logic and API endpoints.
    *   `src/api/db/`: Database layer and schemas.
        *   `src/api/db/index.ts`: Database connection.
        *   `src/api/db/schemas/`: Drizzle schemas.
        *   `src/api/db/schemas/index.ts`: Main schema exports.
    *   `src/api/env.ts`: t3 env setup.
*   `src/schema/`: Drizzle schemas only (can be used for partial schemas within modules).
*   `src/hooks/`: Custom React hooks (auth state, effects).

## üß± Architecture Patterns

<Note>
  Prefer building custom solutions for core functionalities like caching, rate limiting, and authentication whenever possible.
</Note>

### ‚úÖ Patterns to Follow

*   Use functional programming.
*   Define all logic in functions, not classes.
*   Implement the Repository Pattern using functional constructs. All database queries and mutations should be handled within dedicated functional repositories.
*   Functional repositories should abstract the underlying data source (e.g., Drizzle ORM) from the application logic.
*   Use `TProps` if only one type exists in a file.
*   Use `TPrefixName` style if multiple types exist in a file.
*   Prefer `type` unless you need polymorphism, then use `interface`.
*   Use server actions that directly call repository functions for data access (no separate actions folder).
*   Always use email as the unique user identity key.
*   Immediately create a session and set cookies after authentication. This logic will reside in a mutation function.
*   Use conditional UI rendering to redirect away from login/register if authenticated.
*   Use `mapUser()` per provider for adaptable OAuth payloads.
*   Store authenticated state in a shared state or hook so the UI updates instantly.
*   Place provider configurations in a single `PROVIDERS` object for scalability.
*   Abstract database access under an alias `db` (e.g., `import { db } from 'db'`).
*   Abstract database code for easy swapping of ORMs.
*   Implement all server logic as **server functions** within `queries` and `mutations` folders, co-located with their respective modules. These server functions will interact with the functional repositories.
*   Ensure everything built is agnostic to the underlying libraries and frameworks (e.g., database and authentication logic should be easily swappable). The functional Repository Pattern facilitates this.
*   Avoid framework/library-specific naming (e.g., no `supabase.ts` or `prisma.ts`).
*   Design features to be portable across projects with minimal changes.
*   Emphasize shared components and hooks for consistency.

### ‚ùå Anti-patterns to Avoid

*   Don't use `getServerSideProps`, `useEffect` for data fetching. Interact with data through functional repositories in server actions (`queries` or `mutations`) or other server-side contexts.
*   Don't call JWT functions on the client.
*   Don't use classes or class-based architecture for application logic.
*   Don't hardcode provider logic outside the `PROVIDERS` map.
*   Don't use magic strings for role checks (e.g., use `isAdmin`).
*   Don't bundle large libraries in the initial JS payload.
*   Don't load non-critical fonts eagerly.
*   Don't use client-side navigation for critical paths.
*   Don't implement heavy computations without memoization.
*   Don't load full libraries when only parts are needed.
*   Don't add comments except if the logic is **REALLY complicated and vague**.
*   **Don't directly access the database (using `db`) outside of functional repository implementations.**
*   Do not create a `lib` folder, or `helpers` or `utilities` folders. Place shared functional code within the `src/shared` directory.

## üîë OAuth Guidelines

*   All OAuth callback URIs should resolve to: `http://localhost:3000?provider=xyz`
*   Provider tokens should always be exchanged server-side.
*   Extract email fallback from providers that don't send it directly.

## üîê Authentication Logic

*   A user is considered admin if their email matches `process.env.ADMIN_EMAIL`.
*   The session is created server-side via a mutation function that interacts with an authentication repository.
*   Session must persist across page reloads and logouts must be handled via a mutation (not a route), which will interact with the authentication repository.
*   We are building a custom-rolled authentication with JWT (using Jose), sessions, and an ORM, encapsulated within functional authentication repositories.

## üöÄ Performance Optimization Rules

### Font Loading:

*   Use local fonts over Google Fonts when possible.
*   Set `display: 'optional'` for primary fonts to prevent CLS.
*   Set `display: 'swap'` for secondary fonts.
*   Preload only critical fonts.
*   Use `woff2` format for best compression.
*   Include comprehensive font fallbacks.

### Bundle Optimization:

*   Keep First Load JS under 70kb for instant hydration.
*   Use dynamic imports for non-critical components.
*   Split metadata into static and dynamic parts.
*   Implement proper code splitting boundaries.
*   Avoid large dependencies in shared layouts.
*   Use route segments for granular chunking.

### Image Optimization:

*   Use `next/image` with `priority` for LCP images.
*   Implement blur placeholder for images.
*   Preload critical images.
*   Use responsive `sizes` attribute.
*   Optimize image formats (WebP/AVIF).

### Component Optimization:

*   Use `React.memo()` for expensive renders.
*   Implement proper suspense boundaries.
*   Keep component bundles under 50kb.
*   Use CSS Modules for scoped styling.
*   Implement proper lazy loading boundaries.

## üìö Naming Conventions

1.  **File Names:**
    *   Use **kebab-case** for all filenames.
    *   Single-function files: One file per function (e.g., `get-user.ts`).
    *   Each folder has an `index.ts` for exports.
2.  **Imports:**
    *   Use aliases for clarity and simplicity (e.g., `ui`, `db`). Note that `db` will primarily be used within functional repository implementations.
3.  **Components:**
    *   Components are named in PascalCase.
4.  **Types:**
    *   Prefer **types** over interfaces where possible.
    *   Generic types (e.g., `PageProps`) are stored in `src/shared/types/`.
5.  **Repositories:**
    *   Functional repository files should follow the kebab-case convention (e.g., `user-repository.ts`).
    *   Repository functions within these files should be clearly named to indicate their purpose (e.g., `getUserById`, `createUser`).

## ‚ú® Tech Stack

*   Zustand (state management)
*   Framer Motion (animations)
*   Radix/Shadcn (UI components, though custom-built solutions are preferred)
*   TailwindCSS (styling)
*   Zod (validation)
*   Drizzle ORM / Drizzle-Kit (default ORM, but swappable)
*   Postgres (database, though interchangeable with equivalent solutions)
*   Jose (JWT handling)
*   Prism or another syntax highlighter (if needed)
*   Icon library of choice
*   Nuqs (if needed)

## üìù Markdown Guidelines

The following guidelines are for writing content in Markdown and MDX format:

*   Use frontmatter to define the title and description.
*   The first heading on the page should be an `<h1>` tag that matches the title in the frontmatter.
*   Use Fumadocs components (if applicable) for enhanced UI elements (refer to <http://fumadocs.vercel.app/docs/ui/markdown>).
*   Use standard Markdown code fences for code examples and specify the language for syntax highlighting.
*   Use Markdown links for internal and external navigation: `\[Link Text](url)`.
*   Place images in the `/public` directory and reference them using relative paths.
*   Use `Note`, `Tip`, `Important`, `Warning`, and `Danger` components to highlight important information.

## Examples

### Module Structure with Functional Repositories

```text
src/
‚îú‚îÄ‚îÄ api/
‚îÇ   ‚îú‚îÄ‚îÄ db/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts         # Database connection
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ schemas/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ index.ts     # Main schema exports
‚îÇ   ‚îî‚îÄ‚îÄ env.ts               # t3 env setup
‚îú‚îÄ‚îÄ modules/
‚îÇ   ‚îî‚îÄ‚îÄ authentication /
‚îÇ       ‚îú‚îÄ‚îÄ queries/         # Server action query functions interacting with repositories
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ get-authenticated-user.ts # Calls Auth Repository query
‚îÇ       ‚îú‚îÄ‚îÄ mutations/       # Server action mutation functions interacting with repositories
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ create-new-user.ts      # Calls Auth Repository mutation
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ update-user-profile.ts # Calls Auth Repository mutation
‚îÇ       ‚îú‚îÄ‚îÄ models/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ z.user.ts    # Zod validation
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ z.session.ts
‚îÇ       ‚îú‚îÄ‚îÄ repositories/
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ authentication-repository.ts # Functional authentication data access logic
‚îÇ       ‚îú‚îÄ‚îÄ state/
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ use-auth-state.ts
‚îÇ       ‚îî‚îÄ‚îÄ hooks/
‚îÇ           ‚îú‚îÄ‚îÄ use-auth.ts
‚îÇ           ‚îî‚îÄ‚îÄ use-permissions.ts
‚îú‚îÄ‚îÄ shared/
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ui/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ index.ts     # Shadcn component exports
‚îÇ   ‚îú‚îÄ‚îÄ state/
‚îÇ   ‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îî‚îÄ‚îÄ types/
‚îú‚îÄ‚îÄ components/              # Singular-use components
‚îú‚îÄ‚îÄ app/                     # Rendering views
‚îÇ   ‚îî‚îÄ‚îÄ <page-name>/
‚îÇ       ‚îî‚îÄ‚îÄ page.tsx
‚îî‚îÄ‚îÄ views/                   # UI composition for pages
    ‚îî‚îÄ‚îÄ <page-name>/
        ‚îî‚îÄ‚îÄ index.tsx
```

### Example of a functional repository

```typescript
import { db } from 'db';
import { users, sessions } from '@/api/db/schemas'; // Import necessary schemas

export function authenticationRepository() {
  return {
    getUserByEmail: async (email: string) => {
      const user = await db.query.users.findFirst({
        where: (users, { eq }) => eq(users.email, email),
      });
      return user;
    },

    createUser: async (userData: typeof users.$inferInsert) => {
      const [newUser] = await db.insert(users).values(userData).returning();
      return newUser;
    },

    // Add functional methods for creating sessions, deleting sessions, etc.
    createSession: async (sessionData: typeof sessions.$inferInsert) => {
      const [newSession] = await db.insert(sessions).values(sessionData).returning();
      return newSession;
    },
  };
}
```

### Example Mutation Function Using a Functional Repository (src/modules/authenticatie/mutations/create-new-user.ts)

```typescript
'use server';

import { z } from 'zod';
import { authenticationRepository } from '@/modules/authenticatie/repositories/authentication-repository';
import { createUserSchema } from '@/modules/authenticatie/models/z.user';

export async function createNewUser(formData: FormData) {
  const data = Object.fromEntries(formData.entries());
  const parsedData = createUserSchema.parse(data);

  const hashedPassword = parsedData.password; // Replace with actual hashing

  try {
    const newUser = await authenticationRepository().createUser({
      email: parsedData.email,
      hashedPassword: hashedPassword,
      // Add other user properties
    });

    if (newUser) {
      // Session creation logic should be here or called from here,
      // potentially interacting with the repository or a related function.
      await authenticationRepository().createSession({ userId: newUser.id /* other session data */ });
      return { success: true, user: { id: newUser.id, email: newUser.email } };
    } else {
      return { success: false, error: 'Failed to create user.' };
    }
  } catch (error) {
    console.error('Error creating user:', error);
    return { success: false, error: 'An error occurred during user creation.' };
  }
}

```
